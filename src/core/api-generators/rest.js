const express = require('express');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const fs = require('fs');
const path = require('path');
const logger = require('../utils/logger');

/**
 * Setup REST API endpoints
 */
function setupRESTApi(app, config) {
  const router = express.Router();
  
  // Setup Swagger documentation if enabled
  if (config.documentation) {
    const swaggerOptions = {
      definition: {
        openapi: '3.0.0',
        info: {
          title: 'Universal Backend Engine API',
          version: config.version,
          description: 'Dynamic REST API generated by Universal Backend Engine',
        },
        servers: [
          {
            url: `${config.basePath}/${config.version}`,
            description: 'API Server',
          },
        ],
      },
      apis: ['./src/models/**/*.js', './src/core/api-generators/rest.js'],
    };
    
    const swaggerSpec = swaggerJsdoc(swaggerOptions);
    router.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));
    
    // Endpoint to get the OpenAPI spec
    router.get('/docs.json', (req, res) => {
      res.setHeader('Content-Type', 'application/json');
      res.send(swaggerSpec);
    });
    
    logger.info(`REST API documentation available at ${config.basePath}/${config.version}/docs`);
  }
  
  // Dynamically load and register route handlers
  const modelsDir = path.join(__dirname, '../../models');
  if (fs.existsSync(modelsDir)) {
    fs.readdirSync(modelsDir).forEach(file => {
      if (file.endsWith('.js')) {
        const model = require(path.join(modelsDir, file));
        if (model.routes) {
          // Register model routes
          registerModelRoutes(router, model);
        }
      }
    });
  }
  
  // Register the router
  app.use(`${config.basePath}/${config.version}`, router);
  
  return router;
}

/**
 * Register routes for a model
 */
function registerModelRoutes(router, model) {
  const { name, routes, middlewares = {} } = model;
  const basePath = `/${name.toLowerCase()}`;
  
  // Apply model-specific middleware if available
  const modelRouter = express.Router();
  if (middlewares.all) {
    modelRouter.use(middlewares.all);
  }
  
  // Register CRUD routes if they exist in the model
  if (routes.getAll) {
    modelRouter.get('/', applyMiddleware(middlewares.getAll), routes.getAll);
  }
  
  if (routes.getById) {
    modelRouter.get('/:id', applyMiddleware(middlewares.getById), routes.getById);
  }
  
  if (routes.create) {
    modelRouter.post('/', applyMiddleware(middlewares.create), routes.create);
  }
  
  if (routes.update) {
    modelRouter.put('/:id', applyMiddleware(middlewares.update), routes.update);
  }
  
  if (routes.delete) {
    modelRouter.delete('/:id', applyMiddleware(middlewares.delete), routes.delete);
  }
  
  // Register custom routes if they exist
  if (routes.custom) {
    routes.custom.forEach(route => {
      const { method, path: routePath, handler, middleware } = route;
      modelRouter[method.toLowerCase()](
        routePath, 
        applyMiddleware(middleware), 
        handler
      );
    });
  }
  
  // Mount the model router
  router.use(basePath, modelRouter);
  logger.debug(`Registered REST routes for model: ${name}`);
}

/**
 * Helper to apply middleware if it exists
 */
function applyMiddleware(middleware) {
  return middleware || ((req, res, next) => next());
}

module.exports = {
  setupRESTApi
}; 